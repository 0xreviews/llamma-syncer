/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { Multicaller, MulticallerInterface } from "../Multicaller";

const _abi = [
  {
    inputs: [],
    name: "ArrayLengthsMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "bytes[]",
        name: "",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610297806100206000396000f3fe60806040526004361061001e5760003560e01c8063b7402f6414610023575b600080fd5b610036610031366004610135565b61004c565b60405161004391906101cf565b60405180910390f35b60608184148487141661006657633b800a463d526004601cfd5b60203d5283602052836100785760403df35b60408460051b945084868237808501945b815187016040820181356020830182376000808335838a358f355af16100b3573d6000803e3d6000fd5b8284523d815260209a8b019a96870196938401933d9060009083013e50503d01603f01601f191685821061008957604081016000f35b60008083601f8401126100fb57600080fd5b50813567ffffffffffffffff81111561011357600080fd5b6020830191508360208260051b850101111561012e57600080fd5b9250929050565b6000806000806000806060878903121561014e57600080fd5b863567ffffffffffffffff8082111561016657600080fd5b6101728a838b016100e9565b9098509650602089013591508082111561018b57600080fd5b6101978a838b016100e9565b909650945060408901359150808211156101b057600080fd5b506101bd89828a016100e9565b979a9699509497509295939492505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b8381101561025357888603603f1901855282518051808852835b8181101561022c578281018a01518982018b01528901610211565b508781018901849052601f01601f19169096018701955093860193918601916001016101f7565b50939897505050505050505056fea26469706673582212201c5f7862f5ddaa443bb260712f20036c533a1b5c502ab9fdb9ce24c903ff321664736f6c63430008130033";

type MulticallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicaller__factory extends ContractFactory {
  constructor(...args: MulticallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Multicaller & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Multicaller__factory {
    return super.connect(runner) as Multicaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallerInterface {
    return new Interface(_abi) as MulticallerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multicaller {
    return new Contract(address, _abi, runner) as unknown as Multicaller;
  }
}
