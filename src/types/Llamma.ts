/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface LlammaInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "set_admin"
      | "coins"
      | "price_oracle"
      | "dynamic_fee"
      | "get_rate_mul"
      | "get_base_price"
      | "p_current_up"
      | "p_current_down"
      | "p_oracle_up"
      | "p_oracle_down"
      | "get_p"
      | "read_user_tick_numbers"
      | "can_skip_bands"
      | "active_band_with_skip"
      | "has_liquidity"
      | "deposit_range"
      | "withdraw"
      | "get_dy"
      | "get_dxdy"
      | "get_dx"
      | "get_dydx"
      | "exchange(uint256,uint256,uint256,uint256)"
      | "exchange(uint256,uint256,uint256,uint256,address)"
      | "exchange_dy(uint256,uint256,uint256,uint256)"
      | "exchange_dy(uint256,uint256,uint256,uint256,address)"
      | "get_y_up"
      | "get_x_down"
      | "get_sum_xy"
      | "get_xy"
      | "get_amount_for_price"
      | "set_rate"
      | "set_fee"
      | "set_admin_fee"
      | "reset_admin_fees"
      | "set_callback"
      | "admin"
      | "A"
      | "fee"
      | "admin_fee"
      | "rate"
      | "active_band"
      | "min_band"
      | "max_band"
      | "admin_fees_x"
      | "admin_fees_y"
      | "price_oracle_contract"
      | "bands_x"
      | "bands_y"
      | "liquidity_mining_callback"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TokenExchange"
      | "Deposit"
      | "Withdraw"
      | "SetRate"
      | "SetFee"
      | "SetAdminFee"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "set_admin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "coins", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "price_oracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dynamic_fee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_rate_mul",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "get_base_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "p_current_up",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "p_current_down",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "p_oracle_up",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "p_oracle_down",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "get_p", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "read_user_tick_numbers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "can_skip_bands",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "active_band_with_skip",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "has_liquidity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit_range",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dxdy",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dx",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "get_dydx",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,address)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_dy(uint256,uint256,uint256,uint256)",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exchange_dy(uint256,uint256,uint256,uint256,address)",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "get_y_up",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_x_down",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "get_sum_xy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "get_xy", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "get_amount_for_price",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_rate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_fee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "set_admin_fee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "reset_admin_fees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "set_callback",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "A", values?: undefined): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "admin_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "active_band",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "min_band", values?: undefined): string;
  encodeFunctionData(functionFragment: "max_band", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "admin_fees_x",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admin_fees_y",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "price_oracle_contract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bands_x",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bands_y",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity_mining_callback",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "set_admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "price_oracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamic_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_rate_mul",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "get_base_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p_current_up",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p_current_down",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p_oracle_up",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p_oracle_down",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_p", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "read_user_tick_numbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "can_skip_bands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "active_band_with_skip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "has_liquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit_range",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_dy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_dxdy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_dx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_dydx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange(uint256,uint256,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_dy(uint256,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchange_dy(uint256,uint256,uint256,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "get_y_up", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_x_down", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_sum_xy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get_xy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "get_amount_for_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "set_rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set_fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "set_admin_fee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reset_admin_fees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "set_callback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "A", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "active_band",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "min_band", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max_band", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "admin_fees_x",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "admin_fees_y",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "price_oracle_contract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bands_x", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bands_y", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidity_mining_callback",
    data: BytesLike
  ): Result;
}

export namespace TokenExchangeEvent {
  export type InputTuple = [
    buyer: AddressLike,
    sold_id: BigNumberish,
    tokens_sold: BigNumberish,
    bought_id: BigNumberish,
    tokens_bought: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    sold_id: bigint,
    tokens_sold: bigint,
    bought_id: bigint,
    tokens_bought: bigint
  ];
  export interface OutputObject {
    buyer: string;
    sold_id: bigint;
    tokens_sold: bigint;
    bought_id: bigint;
    tokens_bought: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    provider: AddressLike,
    amount: BigNumberish,
    n1: BigNumberish,
    n2: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    amount: bigint,
    n1: bigint,
    n2: bigint
  ];
  export interface OutputObject {
    provider: string;
    amount: bigint;
    n1: bigint;
    n2: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    provider: AddressLike,
    amount_borrowed: BigNumberish,
    amount_collateral: BigNumberish
  ];
  export type OutputTuple = [
    provider: string,
    amount_borrowed: bigint,
    amount_collateral: bigint
  ];
  export interface OutputObject {
    provider: string;
    amount_borrowed: bigint;
    amount_collateral: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRateEvent {
  export type InputTuple = [
    rate: BigNumberish,
    rate_mul: BigNumberish,
    time: BigNumberish
  ];
  export type OutputTuple = [rate: bigint, rate_mul: bigint, time: bigint];
  export interface OutputObject {
    rate: bigint;
    rate_mul: bigint;
    time: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAdminFeeEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Llamma extends BaseContract {
  connect(runner?: ContractRunner | null): Llamma;
  waitForDeployment(): Promise<this>;

  interface: LlammaInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  set_admin: TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;

  coins: TypedContractMethod<[i: BigNumberish], [string], "view">;

  price_oracle: TypedContractMethod<[], [bigint], "view">;

  dynamic_fee: TypedContractMethod<[], [bigint], "view">;

  get_rate_mul: TypedContractMethod<[], [bigint], "view">;

  get_base_price: TypedContractMethod<[], [bigint], "view">;

  p_current_up: TypedContractMethod<[n: BigNumberish], [bigint], "view">;

  p_current_down: TypedContractMethod<[n: BigNumberish], [bigint], "view">;

  p_oracle_up: TypedContractMethod<[n: BigNumberish], [bigint], "view">;

  p_oracle_down: TypedContractMethod<[n: BigNumberish], [bigint], "view">;

  get_p: TypedContractMethod<[], [bigint], "view">;

  read_user_tick_numbers: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  can_skip_bands: TypedContractMethod<[n_end: BigNumberish], [boolean], "view">;

  active_band_with_skip: TypedContractMethod<[], [bigint], "view">;

  has_liquidity: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  deposit_range: TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      n1: BigNumberish,
      n2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [user: AddressLike, frac: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;

  get_dy: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, in_amount: BigNumberish],
    [bigint],
    "view"
  >;

  get_dxdy: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, in_amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  get_dx: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, out_amount: BigNumberish],
    [bigint],
    "view"
  >;

  get_dydx: TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, out_amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;

  "exchange(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      in_amount: BigNumberish,
      min_amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "exchange(uint256,uint256,uint256,uint256,address)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      in_amount: BigNumberish,
      min_amount: BigNumberish,
      _for: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "exchange_dy(uint256,uint256,uint256,uint256)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      out_amount: BigNumberish,
      max_amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  "exchange_dy(uint256,uint256,uint256,uint256,address)": TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      out_amount: BigNumberish,
      max_amount: BigNumberish,
      _for: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;

  get_y_up: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  get_x_down: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  get_sum_xy: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint]],
    "view"
  >;

  get_xy: TypedContractMethod<
    [user: AddressLike],
    [[bigint[], bigint[]]],
    "view"
  >;

  get_amount_for_price: TypedContractMethod<
    [p: BigNumberish],
    [[bigint, boolean]],
    "view"
  >;

  set_rate: TypedContractMethod<[rate: BigNumberish], [bigint], "nonpayable">;

  set_fee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  set_admin_fee: TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;

  reset_admin_fees: TypedContractMethod<[], [void], "nonpayable">;

  set_callback: TypedContractMethod<
    [liquidity_mining_callback: AddressLike],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  A: TypedContractMethod<[], [bigint], "view">;

  fee: TypedContractMethod<[], [bigint], "view">;

  admin_fee: TypedContractMethod<[], [bigint], "view">;

  rate: TypedContractMethod<[], [bigint], "view">;

  active_band: TypedContractMethod<[], [bigint], "view">;

  min_band: TypedContractMethod<[], [bigint], "view">;

  max_band: TypedContractMethod<[], [bigint], "view">;

  admin_fees_x: TypedContractMethod<[], [bigint], "view">;

  admin_fees_y: TypedContractMethod<[], [bigint], "view">;

  price_oracle_contract: TypedContractMethod<[], [string], "view">;

  bands_x: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  bands_y: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  liquidity_mining_callback: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "set_admin"
  ): TypedContractMethod<[_admin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "coins"
  ): TypedContractMethod<[i: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "price_oracle"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dynamic_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_rate_mul"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_base_price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "p_current_up"
  ): TypedContractMethod<[n: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "p_current_down"
  ): TypedContractMethod<[n: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "p_oracle_up"
  ): TypedContractMethod<[n: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "p_oracle_down"
  ): TypedContractMethod<[n: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_p"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "read_user_tick_numbers"
  ): TypedContractMethod<[user: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "can_skip_bands"
  ): TypedContractMethod<[n_end: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "active_band_with_skip"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "has_liquidity"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "deposit_range"
  ): TypedContractMethod<
    [
      user: AddressLike,
      amount: BigNumberish,
      n1: BigNumberish,
      n2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [user: AddressLike, frac: BigNumberish],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_dy"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, in_amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_dxdy"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, in_amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_dx"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, out_amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "get_dydx"
  ): TypedContractMethod<
    [i: BigNumberish, j: BigNumberish, out_amount: BigNumberish],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "exchange(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      in_amount: BigNumberish,
      min_amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchange(uint256,uint256,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      in_amount: BigNumberish,
      min_amount: BigNumberish,
      _for: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchange_dy(uint256,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      out_amount: BigNumberish,
      max_amount: BigNumberish
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exchange_dy(uint256,uint256,uint256,uint256,address)"
  ): TypedContractMethod<
    [
      i: BigNumberish,
      j: BigNumberish,
      out_amount: BigNumberish,
      max_amount: BigNumberish,
      _for: AddressLike
    ],
    [[bigint, bigint]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "get_y_up"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_x_down"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "get_sum_xy"
  ): TypedContractMethod<[user: AddressLike], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "get_xy"
  ): TypedContractMethod<[user: AddressLike], [[bigint[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "get_amount_for_price"
  ): TypedContractMethod<[p: BigNumberish], [[bigint, boolean]], "view">;
  getFunction(
    nameOrSignature: "set_rate"
  ): TypedContractMethod<[rate: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "set_fee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_admin_fee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reset_admin_fees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set_callback"
  ): TypedContractMethod<
    [liquidity_mining_callback: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(nameOrSignature: "A"): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_fee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "active_band"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "min_band"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "max_band"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_fees_x"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "admin_fees_y"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "price_oracle_contract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "bands_x"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "bands_y"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidity_mining_callback"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "TokenExchange"
  ): TypedContractEvent<
    TokenExchangeEvent.InputTuple,
    TokenExchangeEvent.OutputTuple,
    TokenExchangeEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;
  getEvent(
    key: "SetRate"
  ): TypedContractEvent<
    SetRateEvent.InputTuple,
    SetRateEvent.OutputTuple,
    SetRateEvent.OutputObject
  >;
  getEvent(
    key: "SetFee"
  ): TypedContractEvent<
    SetFeeEvent.InputTuple,
    SetFeeEvent.OutputTuple,
    SetFeeEvent.OutputObject
  >;
  getEvent(
    key: "SetAdminFee"
  ): TypedContractEvent<
    SetAdminFeeEvent.InputTuple,
    SetAdminFeeEvent.OutputTuple,
    SetAdminFeeEvent.OutputObject
  >;

  filters: {
    "TokenExchange(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;
    TokenExchange: TypedContractEvent<
      TokenExchangeEvent.InputTuple,
      TokenExchangeEvent.OutputTuple,
      TokenExchangeEvent.OutputObject
    >;

    "Deposit(address,uint256,int256,int256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Withdraw(address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;

    "SetRate(uint256,uint256,uint256)": TypedContractEvent<
      SetRateEvent.InputTuple,
      SetRateEvent.OutputTuple,
      SetRateEvent.OutputObject
    >;
    SetRate: TypedContractEvent<
      SetRateEvent.InputTuple,
      SetRateEvent.OutputTuple,
      SetRateEvent.OutputObject
    >;

    "SetFee(uint256)": TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;
    SetFee: TypedContractEvent<
      SetFeeEvent.InputTuple,
      SetFeeEvent.OutputTuple,
      SetFeeEvent.OutputObject
    >;

    "SetAdminFee(uint256)": TypedContractEvent<
      SetAdminFeeEvent.InputTuple,
      SetAdminFeeEvent.OutputTuple,
      SetAdminFeeEvent.OutputObject
    >;
    SetAdminFee: TypedContractEvent<
      SetAdminFeeEvent.InputTuple,
      SetAdminFeeEvent.OutputTuple,
      SetAdminFeeEvent.OutputObject
    >;
  };
}
